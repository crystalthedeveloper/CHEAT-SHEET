# 
# Django/mysql
# 


# Install MySQL and mysqlclient:
 ~$ pipenv install mysqlclient 
 ~$ pip3 install mysqlclient
 ~$ pip3 install pymysql
 ~$ brew install mysql
 ~$ brew install mysql pkg-config

# Start mysql, username and  password
~$ /usr/local/mysql/bin/mysql -u root -p

# sql create database
~$ create database mydbs;

# sql Start mysql
~$ show databases;

# sql use database
~$ use mydbs;

# sql show tables in the database
~$ Show tables;

# To see the details of this table, type the command:
~$ describe myapp_booking;

# Create a new user for the database by running the following command:
~$ CREATE USER 'admindjango'@'localhost' IDENTIFIED BY '

# Run the following command to grant all permissions to the user you have created:
 # Privileges assigned using GRANT command do not require the flush privileges but it is usually a good practice to run this command while you are using variable # commands for changing privileges and reloading the server and grant
 # tables containing information about user accounts.

~$ GRANT ALL ON * * TO 'admindjango'@ 'localhost' ;

# You should use FLUSH PRIVILEGES; only if you modify the grant tables directly using statements such as INSERT, UPDATE, or DELETE .
~$ FLUSH PRIVILEGES;

# This SQL statement is used to modify the authentication method and password for the MySQL user 'root' when connecting from the 'localhost' host.
~$ ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';

# Check if the user 'root'@'localhost' already exists. You can do this by running:
 # query is retrieving the 'User' and 'Host' columns from the mysql.user table where the user is 'root' and the host is 'localhost'.
~$ SELECT User, Host FROM mysql.user WHERE User='root' AND Host='localhost';

# If you want to update the password for an existing user, you can use the following
command:
~$ ALTER USER 'root '@'localhost' IDENTIFIED BY 'new_password';

# Exit 
~$ \q